"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const streamr_client_protocol_1 = require("streamr-client-protocol");
const utils_1 = require("../utils");
const utils_2 = require("../stream/utils");
const api_1 = require("./api");
const messageStream_1 = __importDefault(require("./messageStream"));
const { ControlMessage } = streamr_client_protocol_1.ControlLayer;
/**
 * Stream of resent messages.
 * Sends resend request, handles responses.
 */
function resendStream(client, opts = {}, onFinally = async () => { }) {
    const options = utils_2.validateOptions(opts);
    const { connection } = client;
    const requestId = utils_1.counterId(`${options.key}-resend`);
    const msgStream = messageStream_1.default(client.connection, {
        ...options,
        isUnicast: true,
    }, async (...args) => {
        try {
            await connection.removeHandle(requestId);
        }
        finally {
            await onFinally(...args);
        }
    });
    const onResendDone = utils_2.waitForResponse({
        requestId,
        connection: client.connection,
        types: [
            ControlMessage.TYPES.ResendResponseResent,
            ControlMessage.TYPES.ResendResponseNoResend,
        ],
    }).then(() => (msgStream.end()), async (err) => {
        await msgStream.cancel(err);
        throw err;
    });
    // wait for resend complete message or resend request done
    return Object.assign(msgStream, {
        async subscribe() {
            await connection.addHandle(requestId);
            // wait for resend complete message or resend request done
            let error;
            await Promise.race([
                api_1.resend(client, {
                    requestId,
                    ...options,
                }).catch((err) => {
                    error = err;
                }),
                onResendDone.catch((err) => {
                    error = err;
                })
            ]);
            if (error) {
                await msgStream.cancel(error);
                throw error;
            }
            return this;
        },
        async unsubscribe() {
            return msgStream.cancel();
        }
    });
}
exports.default = resendStream;
//# sourceMappingURL=resendStream.js.map