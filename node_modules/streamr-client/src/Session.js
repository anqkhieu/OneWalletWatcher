"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const wallet_1 = require("@ethersproject/wallet");
const providers_1 = require("@ethersproject/providers");
var State;
(function (State) {
    State["LOGGING_OUT"] = "logging out";
    State["LOGGED_OUT"] = "logged out";
    State["LOGGING_IN"] = "logging in";
    State["LOGGED_IN"] = "logged in";
})(State || (State = {}));
/** @internal */
class Session extends eventemitter3_1.default {
    constructor(client, options = {}) {
        super();
        this._client = client;
        this.options = {
            ...options
        };
        this.state = State.LOGGED_OUT;
        // TODO: move loginFunction to StreamrClient constructor where "auth type" is checked
        if (typeof this.options.privateKey !== 'undefined') {
            const wallet = new wallet_1.Wallet(this.options.privateKey);
            this.loginFunction = async () => (this._client.loginWithChallengeResponse((d) => wallet.signMessage(d), wallet.address));
        }
        else if (typeof this.options.ethereum !== 'undefined') {
            const provider = new providers_1.Web3Provider(this.options.ethereum);
            const signer = provider.getSigner();
            this.loginFunction = async () => (this._client.loginWithChallengeResponse((d) => signer.signMessage(d), await signer.getAddress()));
        }
        else if (typeof this.options.apiKey !== 'undefined') {
            this.loginFunction = async () => (this._client.loginWithApiKey(this.options.apiKey));
        }
        else if (typeof this.options.username !== 'undefined' && typeof this.options.password !== 'undefined') {
            this.loginFunction = async () => (this._client.loginWithUsernamePassword(this.options.username, this.options.password));
        }
        else {
            if (!this.options.sessionToken) {
                this.options.unauthenticated = true;
            }
            this.loginFunction = async () => {
                throw new Error('Need either "privateKey", "ethereum" or "sessionToken" to login.');
            };
        }
    }
    isUnauthenticated() {
        return this.options.unauthenticated;
    }
    updateState(newState) {
        this.state = newState;
        this.emit(newState);
    }
    async getSessionToken(requireNewToken = false) {
        if (this.options.sessionToken && !requireNewToken) {
            return this.options.sessionToken;
        }
        if (this.options.unauthenticated) {
            return undefined;
        }
        if (this.state !== State.LOGGING_IN) {
            if (this.state === State.LOGGING_OUT) {
                this.sessionTokenPromise = new Promise((resolve) => {
                    this.once(State.LOGGED_OUT, () => resolve(this.getSessionToken(requireNewToken)));
                });
            }
            else {
                this.updateState(State.LOGGING_IN);
                this.sessionTokenPromise = this.loginFunction().then((tokenObj) => {
                    this.options.sessionToken = tokenObj.token;
                    this.updateState(State.LOGGED_IN);
                    return tokenObj.token;
                }, (err) => {
                    this.updateState(State.LOGGED_OUT);
                    throw err;
                });
            }
        }
        return this.sessionTokenPromise;
    }
    async logout() {
        if (this.state === State.LOGGED_OUT) {
            throw new Error('Already logged out!');
        }
        if (this.state === State.LOGGING_OUT) {
            throw new Error('Already logging out!');
        }
        if (this.state === State.LOGGING_IN) {
            await new Promise((resolve) => {
                this.once(State.LOGGED_IN, () => resolve(this.logout()));
            });
            return;
        }
        try {
            this.updateState(State.LOGGING_OUT);
            const t = this._client.logoutEndpoint();
            this.options.sessionToken = undefined;
            this.sessionTokenPromise = undefined;
            await t;
        }
        finally {
            this.updateState(State.LOGGED_OUT);
        }
    }
}
exports.default = Session;
//# sourceMappingURL=Session.js.map