import { Serializer } from '../../Serializer';
export declare enum TrackerMessageType {
    StatusMessage = 1,
    InstructionMessage = 2,
    RelayMessage = 5,
    ErrorMessage = 6
}
export interface TrackerMessageOptions {
    version?: number;
    requestId: string;
}
export default class TrackerMessage {
    static LATEST_VERSION: number;
    static TYPES: typeof TrackerMessageType;
    version: number;
    type: TrackerMessageType;
    requestId: string;
    constructor(version: number | undefined, type: TrackerMessageType, requestId: string);
    static registerSerializer(version: number, type: number, serializer: Serializer<TrackerMessage>): void;
    static unregisterSerializer(version: number, type: TrackerMessageType): void;
    static getSerializer(version: number, type: TrackerMessageType): Serializer<TrackerMessage>;
    static getSupportedVersions(): number[];
    serialize(version?: number, ...typeSpecificSerializeArgs: any[]): string;
    /**
     * Takes a serialized representation (array or string) of a message, and returns a ControlMessage instance.
     */
    static deserialize(msg: any[] | string, ...typeSpecificDeserializeArgs: any[]): TrackerMessage;
}
