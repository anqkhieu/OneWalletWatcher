"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const streamr_client_protocol_1 = require("streamr-client-protocol");
const PushQueue_1 = __importDefault(require("../utils/PushQueue"));
function getIsMatchingStreamMessage({ streamId, streamPartition = 0 }) {
    return function isMatchingStreamMessage({ streamMessage }) {
        const msgStreamId = streamMessage.getStreamId();
        if (streamId !== msgStreamId) {
            return false;
        }
        const msgPartition = streamMessage.getStreamPartition();
        if (streamPartition !== msgPartition) {
            return false;
        }
        return true;
    };
}
/**
 * Listen for matching stream messages on connection.
 * Returns a PushQueue that will fill with messages.
 */
function messageStream(connection, { streamId, streamPartition, isUnicast = false, type, }, onFinally = async () => { }) {
    const messageType = String(!type
        ? (isUnicast ? streamr_client_protocol_1.ControlMessage.TYPES.UnicastMessage : streamr_client_protocol_1.ControlMessage.TYPES.BroadcastMessage)
        : type);
    const isMatchingStreamMessage = getIsMatchingStreamMessage({
        streamId,
        streamPartition
    });
    let msgStream;
    // write matching messages to stream
    const onMessage = (msg) => {
        if (!isMatchingStreamMessage(msg)) {
            return;
        }
        msgStream.push(msg);
    };
    // stream acts as buffer
    msgStream = new PushQueue_1.default([], {
        async onEnd(err) {
            // remove onMessage handler & clean up
            connection.off(messageType, onMessage);
            await onFinally(err);
        }
    });
    Object.assign(msgStream, {
        streamId,
        streamPartition,
    });
    connection.on(messageType, onMessage);
    return msgStream;
}
exports.default = messageStream;
//# sourceMappingURL=messageStream.js.map