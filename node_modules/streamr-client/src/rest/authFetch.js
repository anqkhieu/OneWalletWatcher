"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotFoundError = exports.ValidationError = exports.AuthFetchError = exports.DEFAULT_HEADERS = exports.ErrorCode = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const log_1 = require("../utils/log");
const utils_1 = require("../utils");
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["NOT_FOUND"] = "NOT_FOUND";
    ErrorCode["VALIDATION_ERROR"] = "VALIDATION_ERROR";
    ErrorCode["UNKNOWN"] = "UNKNOWN";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
exports.DEFAULT_HEADERS = {
    'Streamr-Client': `streamr-client-javascript/${utils_1.getVersionString()}`,
};
class AuthFetchError extends Error {
    constructor(message, response, body, errorCode) {
        const typePrefix = errorCode ? errorCode + ': ' : '';
        // add leading space if there is a body set
        const bodyMessage = body ? ` ${(typeof body === 'string' ? body : JSON.stringify(body).slice(0, 1024))}...` : '';
        super(typePrefix + message + bodyMessage);
        this.response = response;
        this.body = body;
        this.errorCode = errorCode || ErrorCode.UNKNOWN;
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
}
exports.AuthFetchError = AuthFetchError;
class ValidationError extends AuthFetchError {
    constructor(message, response, body) {
        super(message, response, body, ErrorCode.VALIDATION_ERROR);
    }
}
exports.ValidationError = ValidationError;
class NotFoundError extends AuthFetchError {
    constructor(message, response, body) {
        super(message, response, body, ErrorCode.NOT_FOUND);
    }
}
exports.NotFoundError = NotFoundError;
const ERROR_TYPES = new Map();
ERROR_TYPES.set(ErrorCode.VALIDATION_ERROR, ValidationError);
ERROR_TYPES.set(ErrorCode.NOT_FOUND, NotFoundError);
ERROR_TYPES.set(ErrorCode.UNKNOWN, AuthFetchError);
const parseErrorCode = (body) => {
    let json;
    try {
        json = JSON.parse(body);
    }
    catch (err) {
        return ErrorCode.UNKNOWN;
    }
    const { code } = json;
    return code in ErrorCode ? code : ErrorCode.UNKNOWN;
};
const debug = log_1.Debug('utils:authfetch'); // TODO: could use the debug instance from the client? (e.g. client.debug.extend('authFetch'))
let ID = 0;
/** @internal */
async function authFetch(url, session, opts, requireNewToken = false) {
    ID += 1;
    const timeStart = Date.now();
    const id = ID;
    const options = {
        ...opts,
        headers: {
            ...exports.DEFAULT_HEADERS,
            ...(opts && opts.headers),
        },
    };
    // add default 'Content-Type: application/json' header for all POST and PUT requests
    if (!options.headers['Content-Type'] && (options.method === 'POST' || options.method === 'PUT')) {
        options.headers['Content-Type'] = 'application/json';
    }
    debug('%d %s >> %o', id, url, opts);
    const response = await node_fetch_1.default(url, {
        ...opts,
        headers: {
            ...(session && !session.options.unauthenticated ? {
                Authorization: `Bearer ${await session.getSessionToken(requireNewToken)}`,
            } : {}),
            ...options.headers,
        },
    });
    const timeEnd = Date.now();
    debug('%d %s << %d %s %s %s', id, url, response.status, response.statusText, log_1.Debug.humanize(timeEnd - timeStart));
    const body = await response.text();
    if (response.ok) {
        try {
            return JSON.parse(body || '{}');
        }
        catch (e) {
            debug('%d %s – failed to parse body: %s', id, url, e.stack);
            throw new AuthFetchError(e.message, response, body);
        }
    }
    else if ([400, 401].includes(response.status) && !requireNewToken) {
        debug('%d %s – revalidating session');
        return authFetch(url, session, options, true);
    }
    else {
        debug('%d %s – failed', id, url);
        const errorCode = parseErrorCode(body);
        const ErrorClass = ERROR_TYPES.get(errorCode);
        throw new ErrorClass(`Request ${id} to ${url} returned with error code ${response.status}.`, response, body, errorCode);
    }
}
exports.default = authFetch;
//# sourceMappingURL=authFetch.js.map