"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const streamr_client_protocol_1 = require("streamr-client-protocol");
function computePartition(partitionCount, partitionKey) {
    return streamr_client_protocol_1.Utils.keyToArrayIndex(partitionCount, partitionKey);
}
function StreamPartitioner(cacheOptions) {
    const cachedPartition = utils_1.CacheFn(computePartition, {
        ...cacheOptions,
        cacheKey([partitionCount, partitionKey]) {
            return `${partitionCount}-${partitionKey}`;
        }
    });
    function computeStreamPartition(partitionCount, partitionKey) {
        if (!(Number.isSafeInteger(partitionCount) && partitionCount > 0)) {
            throw new Error(`partitionCount is not a safe positive integer! ${partitionCount}`);
        }
        if (partitionKey == null) {
            // Fallback to random partition if no key
            return Math.floor(Math.random() * partitionCount);
        }
        return cachedPartition(partitionCount, partitionKey);
    }
    computeStreamPartition.clear = cachedPartition.clear;
    return computeStreamPartition;
}
exports.default = StreamPartitioner;
//# sourceMappingURL=StreamPartitioner.js.map