import { StreamMessage } from 'streamr-client-protocol';
import EncryptionUtil, { GroupKey } from './Encryption';
import type { Subscription } from '../../subscribe';
import { StreamrClient } from '../../StreamrClient';
import GroupKeyStore from './GroupKeyStore';
import { GroupKeyId, KeyExchangeOptions } from './KeyExchangeUtils';
export declare class SubscriberKeyExchange {
    requestKeysStep?: () => Promise<void>;
    client: StreamrClient;
    initialGroupKeys: Record<string, import("./KeyExchangeUtils").GroupKeysSerialized>;
    encryptionUtil: EncryptionUtil;
    enabled: boolean;
    constructor(client: StreamrClient, { groupKeys }?: KeyExchangeOptions);
    getSubscription(): Promise<Subscription | undefined>;
    requestKeys({ streamId, publisherId, groupKeyIds }: {
        streamId: string;
        publisherId: string;
        groupKeyIds: GroupKeyId[];
    }): Promise<GroupKey[]>;
    getGroupKeyStore(streamId: string): Promise<GroupKeyStore>;
    getKey(streamMessage: StreamMessage): Promise<GroupKey | undefined>;
    cleanupPending(): void;
    getGroupKey(streamMessage: StreamMessage): Promise<GroupKey | undefined>;
    start(): Promise<void>;
    addNewKey(streamMessage: StreamMessage): Promise<void>;
    stop(): Promise<void>;
}
