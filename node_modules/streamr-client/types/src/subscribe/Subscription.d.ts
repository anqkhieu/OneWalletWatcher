/// <reference types="node" />
import Emitter from 'events';
import { Todo, MaybeAsync } from '../types';
import StreamrClient from '..';
/**
 * @category Important
 */
export default class Subscription extends Emitter {
    streamId: string;
    streamPartition: number;
    constructor(client: StreamrClient, opts: Todo, onFinally?: MaybeAsync<(err?: any) => void>);
    emit(event: symbol | string, ...args: any[]): boolean;
    count(): number;
    /**
     * Collect all messages into an array.
     * Returns array when subscription is ended.
     */
    collect(n?: number): Promise<any[]>;
    [Symbol.asyncIterator](): any;
    cancel(...args: Todo[]): Promise<any>;
    end(...args: Todo[]): Promise<any>;
    isCancelled(...args: Todo[]): boolean;
    return(...args: Todo[]): Promise<any>;
    throw(...args: Todo[]): Promise<any>;
    /**
     * Remove this subscription from the stream.
     */
    unsubscribe(): Promise<any>;
}
