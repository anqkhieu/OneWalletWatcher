"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ControlMessage_1 = __importStar(require("../ControlMessage"));
const SubscribeRequest_1 = __importDefault(require("./SubscribeRequest"));
const Serializer_1 = require("../../../Serializer");
const VERSION = 1;
class SubscribeRequestSerializerV1 extends Serializer_1.Serializer {
    toArray(subscribeRequest) {
        return [
            VERSION,
            ControlMessage_1.default.TYPES.SubscribeRequest,
            subscribeRequest.streamId,
            subscribeRequest.streamPartition,
            subscribeRequest.sessionToken,
        ];
    }
    fromArray(arr) {
        const [version, type, // eslint-disable-line @typescript-eslint/no-unused-vars
        streamId, streamPartition, sessionToken,] = arr;
        return new SubscribeRequest_1.default({
            version, streamId, streamPartition, sessionToken, requestId: ControlMessage_1.PLACEHOLDER_REQUEST_ID_PROTOCOL_V1
        });
    }
}
exports.default = SubscribeRequestSerializerV1;
ControlMessage_1.default.registerSerializer(VERSION, ControlMessage_1.default.TYPES.SubscribeRequest, new SubscribeRequestSerializerV1());
//# sourceMappingURL=SubscribeRequestSerializerV1.js.map