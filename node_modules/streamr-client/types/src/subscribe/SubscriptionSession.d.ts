/// <reference types="node" />
import Emitter from 'events';
import { validateOptions } from '../stream/utils';
import { subscribe, unsubscribe } from './api';
import Subscription from './Subscription';
import { Todo } from '../types';
import StreamrClient from '..';
/**
 * Sends Subscribe/Unsubscribe requests as needed.
 * Adds connection handles as needed.
 */
export default class SubscriptionSession extends Emitter {
    id: string;
    debug: import("debug").Debugger;
    client: StreamrClient;
    options: ReturnType<typeof validateOptions> & {
        id: string;
        subscribe: typeof subscribe;
        unsubscribe: typeof unsubscribe;
    };
    validate: ((...args: any) => Promise<unknown>) & {
        clear(): void;
    } & {
        clear(key: any): void;
    };
    /** active subs */
    subscriptions: Set<Subscription>;
    pendingRemoval: Set<Subscription>;
    updateSubscriptions?: Todo;
    _subscribe: typeof subscribe;
    _unsubscribe: typeof unsubscribe;
    constructor(client: StreamrClient, options: Todo);
    _init(): void;
    has(sub: Subscription): boolean;
    /**
     * Emit message on every subscription,
     * then on self.
     */
    emit(event: string | symbol, ...args: any[]): boolean;
    /**
     * Add subscription & appropriate connection handle.
     */
    add(sub: Subscription): Promise<void>;
    /**
     * Remove subscription & appropriate connection handle.
     */
    remove(sub: Subscription): Promise<void>;
    /**
     * Remove all subscriptions & subscription connection handles
     */
    removeAll(): Promise<void>;
    /**
     * How many subscriptions
     */
    count(): number;
}
