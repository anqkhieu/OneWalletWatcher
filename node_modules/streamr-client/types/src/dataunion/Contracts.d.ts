import { BytesLike } from '@ethersproject/bytes';
import { Contract, ContractReceipt } from '@ethersproject/contracts';
import { EthereumAddress, Todo } from '../types';
import { BigNumber } from '@ethersproject/bignumber';
import StreamrEthereum from '../Ethereum';
import { StreamrClient } from '../StreamrClient';
export default class Contracts {
    ethereum: StreamrEthereum;
    factoryMainnetAddress: EthereumAddress;
    factorySidechainAddress: EthereumAddress;
    templateMainnetAddress: EthereumAddress;
    templateSidechainAddress: EthereumAddress;
    binanceAdapterAddress: EthereumAddress;
    binanceSmartChainAMBAddress: EthereumAddress;
    cachedSidechainAmb?: Todo;
    constructor(client: StreamrClient);
    fetchDataUnionMainnetAddress(dataUnionName: string, deployerAddress: EthereumAddress): Promise<EthereumAddress>;
    getDataUnionMainnetAddress(dataUnionName: string, deployerAddress: EthereumAddress): string;
    fetchDataUnionSidechainAddress(duMainnetAddress: EthereumAddress): Promise<EthereumAddress>;
    getDataUnionSidechainAddress(mainnetAddress: EthereumAddress): string;
    getMainnetContractReadOnly(contractAddress: EthereumAddress): Contract;
    getMainnetContract(contractAddress: EthereumAddress): Contract;
    getSidechainContract(contractAddress: EthereumAddress): Promise<Contract>;
    getSidechainContractReadOnly(contractAddress: EthereumAddress): Promise<Contract>;
    getSidechainAmb(): Promise<any>;
    getMainnetAmb(): Promise<Contract>;
    getBinanceAdapter(): Promise<Contract>;
    getBinanceAdapterReadOnly(): Contract;
    getBinanceSmartChainAmb(binanceSenderPrivateKey: BytesLike): Promise<Contract>;
    requiredSignaturesHaveBeenCollected(messageHash: Todo): Promise<any>;
    transportSignaturesForMessage(messageHash: string, ethersOptions?: {}): Promise<ContractReceipt | null>;
    deployDataUnion({ ownerAddress, agentAddressList, duName, deployerAddress, adminFeeBN, sidechainRetryTimeoutMs, sidechainPollingIntervalMs, confirmations, gasPrice }: {
        ownerAddress: EthereumAddress;
        agentAddressList: EthereumAddress[];
        duName: string;
        deployerAddress: EthereumAddress;
        adminFeeBN: BigNumber;
        sidechainRetryTimeoutMs: number;
        sidechainPollingIntervalMs: number;
        confirmations: number;
        gasPrice?: BigNumber;
    }): Promise<Contract>;
}
