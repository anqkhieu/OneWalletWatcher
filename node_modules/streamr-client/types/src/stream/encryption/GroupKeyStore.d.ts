import { GroupKey } from './Encryption';
import { ServerPersistentStoreOptions } from './ServerPersistentStore';
export interface PersistentStore<K, V> {
    get(key: K): Promise<V | undefined>;
    set(key: K, value: V): Promise<boolean>;
    has(key: K): Promise<boolean>;
    delete(key: K): Promise<boolean>;
    clear(): Promise<boolean>;
    size(): Promise<number>;
    close(): Promise<void>;
    destroy(): Promise<void>;
    exists(): Promise<boolean>;
}
declare type GroupKeyId = string;
declare type GroupKeyStoreOptions = {
    clientId: string;
    streamId: string;
    groupKeys: [GroupKeyId, GroupKey][];
};
export declare class GroupKeyPersistence implements PersistentStore<string, GroupKey> {
    store: PersistentStore<string, string>;
    constructor(options: ServerPersistentStoreOptions);
    has(groupKeyId: string): Promise<boolean>;
    size(): Promise<number>;
    get(groupKeyId: string): Promise<GroupKey | undefined>;
    add(groupKey: GroupKey): Promise<boolean>;
    set(groupKeyId: string, value: GroupKey): Promise<boolean>;
    delete(groupKeyId: string): Promise<boolean>;
    clear(): Promise<boolean>;
    destroy(): Promise<void>;
    close(): Promise<void>;
    exists(): Promise<boolean>;
    get [Symbol.toStringTag](): string;
}
export default class GroupKeyStore {
    store: GroupKeyPersistence;
    currentGroupKeyId: GroupKeyId | undefined;
    nextGroupKeys: GroupKey[];
    constructor({ clientId, streamId, groupKeys }: GroupKeyStoreOptions);
    private storeKey;
    has(id: GroupKeyId): Promise<boolean>;
    isEmpty(): Promise<boolean>;
    useGroupKey(): Promise<[GroupKey | undefined, GroupKey | undefined]>;
    get(id: GroupKeyId): Promise<GroupKey | undefined>;
    exists(): Promise<boolean>;
    clear(): Promise<boolean>;
    rotateGroupKey(): Promise<void>;
    add(groupKey: GroupKey): Promise<GroupKey>;
    setNextGroupKey(newKey: GroupKey): Promise<void>;
    close(): Promise<void>;
    rekey(): Promise<void>;
}
export {};
