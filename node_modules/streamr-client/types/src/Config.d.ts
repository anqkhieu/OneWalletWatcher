/**
 * @module StreamrClientConfig
 */
import { ExternalProvider } from '@ethersproject/providers';
import { BigNumber } from '@ethersproject/bignumber';
import { ConnectionInfo } from '@ethersproject/web';
import { EthereumAddress, Todo } from './types';
import { BytesLike } from '@ethersproject/bytes';
export declare type EthereumConfig = ExternalProvider;
/**
 * @category Important
 */
export declare type StrictStreamrClientOptions = {
    /** Custom human-readable debug id for client. Used in logging. Unique id will be generated regardless. */
    id?: string;
    /**
    * Authentication: identity used by this StreamrClient instance.
    * Can contain member privateKey or (window.)ethereum
    */
    auth: {
        privateKey?: BytesLike;
        ethereum?: EthereumConfig;
        apiKey?: string;
        username?: string;
        password?: string;
    };
    /** Websocket server to connect to */
    url: string;
    /** Core HTTP API calls go here */
    restUrl: string;
    /** joinPartAgent when using EE for join part handling */
    streamrNodeAddress: EthereumAddress;
    /** Automatically connect on first subscribe */
    autoConnect: boolean;
    /**  Automatically disconnect on last unsubscribe */
    autoDisconnect: boolean;
    /** Attempt to order messages */
    orderMessages: boolean;
    retryResendAfter: number;
    gapFillTimeout: number;
    maxGapRequests: number;
    maxRetries: number;
    maxPublishQueueSize: number;
    publishWithSignature: Todo;
    verifySignatures: Todo;
    publisherStoreKeyHistory: boolean;
    publishAutoDisconnectDelay: number;
    groupKeys: Todo;
    keyExchange: Todo;
    binanceRPC: ConnectionInfo & {
        chainId?: number;
    };
    binanceAdapterAddress: EthereumAddress;
    binanceSmartChainAMBAddress: EthereumAddress;
    withdrawServerUrl: string;
    mainnet?: ConnectionInfo | string;
    sidechain: ConnectionInfo & {
        chainId?: number;
    };
    tokenAddress: EthereumAddress;
    tokenSidechainAddress: EthereumAddress;
    dataUnion: {
        /**
         * Threshold value set in AMB configs, smallest token amount to pass over the bridge if
         * someone else pays for the gas when transporting the withdraw tx to mainnet;
         * otherwise the client does the transport as self-service and pays the mainnet gas costs
         */
        minimumWithdrawTokenWei: BigNumber | number | string;
        payForTransport: boolean;
        factoryMainnetAddress: EthereumAddress;
        factorySidechainAddress: EthereumAddress;
        templateMainnetAddress: EthereumAddress;
        templateSidechainAddress: EthereumAddress;
    };
    storageNode: {
        address: EthereumAddress;
        url: string;
    };
    cache: {
        maxSize: number;
        maxAge: number;
    };
};
export declare type StreamrClientOptions = Partial<Omit<StrictStreamrClientOptions, 'dataUnion'> & {
    dataUnion: Partial<StrictStreamrClientOptions['dataUnion']>;
}>;
/**
 * @category Important
 */
export declare const STREAM_CLIENT_DEFAULTS: StrictStreamrClientOptions;
