/**
 * Allows injecting a function to execute after an iterator finishes.
 * Executes finally function even if generator not started.
 * Returns new generator.
 */
export function iteratorFinally(iterable: any, onFinally: any): any;
/**
 * Creates a generator that can be cancelled and perform optional final cleanup.
 * const [cancal, generator] = CancelableGenerator(iterable, onFinally)
 */
export function CancelableGenerator(iterable: any, onFinally?: () => void, { timeout }?: {
    timeout?: number | undefined;
}): any;
export function pipeline(iterables?: any[], onFinally?: typeof defaultOnFinally, { end, ...opts }?: {
    end: any;
}): any;
declare function defaultOnFinally(err: any): Promise<void>;
export {};
