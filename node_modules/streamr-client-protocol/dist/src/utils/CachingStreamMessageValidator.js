"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promise_memoize_1 = __importDefault(require("promise-memoize"));
const StreamMessageValidator_1 = __importDefault(require("./StreamMessageValidator"));
const SigningUtil_1 = __importDefault(require("./SigningUtil"));
/**
 * A thin wrapper around StreamMessageValidator that adds caching for the following
 * expensive functions passed to the constructor:
 * - getStream
 * - isPublisher
 * - isSubscriber
 *
 * Caching the verify function does not make sense, because the input is always unique.
 */
class CachingStreamMessageValidator extends StreamMessageValidator_1.default {
    /**
     * @param getStream async function(streamId): returns the stream metadata object for streamId
     * @param isPublisher async function(address, streamId): returns true if address is a permitted publisher on streamId
     * @param isSubscriber async function(address, streamId): returns true if address is a permitted subscriber on streamId
     * @param verify async function(address, payload, signature): returns true if the address and payload match the signature
     * @param cacheTimeoutMillis Number: Cache timeout in milliseconds. Default 15 minutes.
     * @param cacheErrorsTimeoutMillis Number: Cache timeout for error responses. Default 1 minute.
     */
    constructor({ getStream, isPublisher, isSubscriber, verify = SigningUtil_1.default.verify, cacheTimeoutMillis = 15 * 60 * 1000, cacheErrorsTimeoutMillis = 60 * 1000, }) {
        StreamMessageValidator_1.default.checkInjectedFunctions(getStream, isPublisher, isSubscriber, verify);
        const memoizeOpts = {
            maxAge: cacheTimeoutMillis,
            maxErrorAge: cacheErrorsTimeoutMillis,
        };
        super({
            getStream: (0, promise_memoize_1.default)(getStream, memoizeOpts),
            isPublisher: (0, promise_memoize_1.default)(isPublisher, memoizeOpts),
            isSubscriber: (0, promise_memoize_1.default)(isSubscriber, memoizeOpts),
            verify,
        });
    }
}
exports.default = CachingStreamMessageValidator;
//# sourceMappingURL=CachingStreamMessageValidator.js.map