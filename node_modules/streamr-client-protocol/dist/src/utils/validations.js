"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateIsOneOf = exports.validateIsType = exports.validateIsArray = exports.validateIsNotNegativeInteger = exports.validateIsInteger = exports.validateIsNotEmptyString = exports.validateIsString = exports.validateIsNotNullOrUndefined = void 0;
const ValidationError_1 = __importDefault(require("../errors/ValidationError"));
function validateIsNotNullOrUndefined(varName, varValue) {
    if (varValue === undefined) {
        throw new ValidationError_1.default(`Expected ${varName} to not be undefined.`);
    }
    if (varValue == null) {
        throw new ValidationError_1.default(`Expected ${varName} to not be null.`);
    }
}
exports.validateIsNotNullOrUndefined = validateIsNotNullOrUndefined;
function validateIsString(varName, varValue, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    validateIsNotNullOrUndefined(varName, varValue);
    if (typeof varValue !== 'string' && !(varValue instanceof String)) {
        throw new ValidationError_1.default(`Expected ${varName} to be a string but was a ${typeof varValue} (${varValue}).`);
    }
}
exports.validateIsString = validateIsString;
function validateIsNotEmptyString(varName, varValue, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    validateIsString(varName, varValue);
    if (varValue.length === 0) {
        throw new ValidationError_1.default(`Expected ${varName} to not be an empty string.`);
    }
}
exports.validateIsNotEmptyString = validateIsNotEmptyString;
function validateIsInteger(varName, varValue, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    validateIsNotNullOrUndefined(varName, varValue);
    if (!Number.isInteger(varValue)) {
        throw new ValidationError_1.default(`Expected ${varName} to be an integer but was a ${typeof varValue} (${varValue}).`);
    }
}
exports.validateIsInteger = validateIsInteger;
function validateIsNotNegativeInteger(varName, varValue, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    validateIsInteger(varName, varValue);
    if (varValue < 0) {
        throw new ValidationError_1.default(`Expected ${varName} to not be negative (${varValue}).`);
    }
}
exports.validateIsNotNegativeInteger = validateIsNotNegativeInteger;
function validateIsArray(varName, varValue, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    validateIsNotNullOrUndefined(varName, varValue);
    if (!Array.isArray(varValue)) {
        throw new ValidationError_1.default(`Expected ${varName} to be an array but was a ${typeof varValue} (${varValue}).`);
    }
}
exports.validateIsArray = validateIsArray;
function validateIsType(varName, varValue, typeName, typeClass, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    if (!(varValue instanceof typeClass)) {
        const msg = `Expected ${varName} to be an instance of (${typeName}), but it was: ${JSON.stringify(varValue)}`;
        throw new ValidationError_1.default(msg);
    }
}
exports.validateIsType = validateIsType;
function validateIsOneOf(varName, varValue, validValues, allowNull = false) {
    if (allowNull && varValue == null) {
        return;
    }
    validateIsNotNullOrUndefined(varName, varValue);
    if (!validValues.includes(varValue)) {
        const msg = `Expected ${varName} to be one of ${JSON.stringify(validValues)} but was (${varValue}).`;
        throw new ValidationError_1.default(msg);
    }
}
exports.validateIsOneOf = validateIsOneOf;
//# sourceMappingURL=validations.js.map