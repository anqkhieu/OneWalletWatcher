"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validations_1 = require("../../utils/validations");
const GroupKeyMessage_1 = __importDefault(require("./GroupKeyMessage"));
const StreamMessage_1 = __importDefault(require("./StreamMessage"));
const EncryptedGroupKey_1 = __importDefault(require("./EncryptedGroupKey"));
class GroupKeyAnnounce extends GroupKeyMessage_1.default {
    constructor({ streamId, encryptedGroupKeys }) {
        super(streamId, StreamMessage_1.default.MESSAGE_TYPES.GROUP_KEY_ANNOUNCE);
        (0, validations_1.validateIsArray)('encryptedGroupKeys', encryptedGroupKeys);
        this.encryptedGroupKeys = encryptedGroupKeys;
        // Validate content of encryptedGroupKeys
        this.encryptedGroupKeys.forEach((it) => {
            if (!(it instanceof EncryptedGroupKey_1.default)) {
                throw new Error(`Expected 'encryptedGroupKeys' to be a list of EncryptedGroupKey instances! Was: ${this.encryptedGroupKeys}`);
            }
        });
    }
    toArray() {
        return [this.streamId, this.encryptedGroupKeys.map((it) => it.toArray())];
    }
    static fromArray(arr) {
        const [streamId, encryptedGroupKeys] = arr;
        return new GroupKeyAnnounce({
            streamId,
            encryptedGroupKeys: encryptedGroupKeys.map((it) => EncryptedGroupKey_1.default.fromArray(it)),
        });
    }
    static is(streamMessage) {
        return streamMessage.messageType === StreamMessage_1.default.MESSAGE_TYPES.GROUP_KEY_ERROR_RESPONSE;
    }
}
exports.default = GroupKeyAnnounce;
GroupKeyMessage_1.default.classByMessageType[StreamMessage_1.default.MESSAGE_TYPES.GROUP_KEY_ANNOUNCE] = GroupKeyAnnounce;
//# sourceMappingURL=GroupKeyAnnounce.js.map