import MessageID from './MessageID';
import MessageRef from './MessageRef';
import StreamMessage, { StreamMessageType } from './StreamMessage';
declare type GroupKeyMessageType = Omit<typeof GroupKeyMessage, 'new'>;
export default abstract class GroupKeyMessage {
    static classByMessageType: {
        [key: number]: GroupKeyMessageType;
    };
    streamId: string;
    messageType: StreamMessageType;
    constructor(streamId: string, messageType: StreamMessageType);
    serialize(): string;
    static deserialize(serialized: string, messageType: StreamMessageType): GroupKeyMessage;
    static fromStreamMessage(streamMessage: StreamMessage): GroupKeyMessage;
    toStreamMessage(messageId: MessageID, prevMsgRef: MessageRef | null): StreamMessage;
    abstract toArray(): any[];
    static fromArray(_arr: any[]): GroupKeyMessage;
}
export {};
