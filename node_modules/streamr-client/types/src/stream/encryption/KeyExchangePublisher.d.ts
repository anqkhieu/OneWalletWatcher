import { GroupKey } from './Encryption';
import type { Subscription } from '../../subscribe';
import { StreamrClient } from '../../StreamrClient';
import GroupKeyStore from './GroupKeyStore';
import { GroupKeysSerialized } from './KeyExchangeUtils';
declare type KeyExchangeOptions = {
    groupKeys?: Record<string, GroupKeysSerialized>;
};
export declare class PublisherKeyExchange {
    enabled: boolean;
    client: StreamrClient;
    initialGroupKeys: Record<string, GroupKeysSerialized>;
    cleanupFns: ((...args: any[]) => any)[];
    sub?: Subscription;
    private getSubTask?;
    constructor(client: StreamrClient, { groupKeys }?: KeyExchangeOptions);
    getSub(): Promise<Subscription | undefined>;
    getGroupKeyStore(streamId: string): Promise<GroupKeyStore>;
    rotateGroupKey(streamId: string): Promise<void>;
    setNextGroupKey(streamId: string, groupKey: GroupKey): Promise<void>;
    useGroupKey(streamId: string): Promise<never[] | [GroupKey | undefined, GroupKey | undefined]>;
    hasAnyGroupKey(streamId: string): Promise<boolean>;
    rekey(streamId: string): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
}
export {};
