"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = exports.formatWithOptions = exports.inspect = exports.Debug = exports.DEFAULT_INSPECT_OPTS = void 0;
/**
 * Exposes customised Debug and inspect functions.
 */
const util_1 = __importDefault(require("util"));
const debug_1 = __importDefault(require("debug"));
exports.DEFAULT_INSPECT_OPTS = {
    maxStringLength: 256
};
const debug = debug_1.default('Streamr');
// @ts-expect-error inspectOpts not in debug types
debug.inspectOpts = {
    ...exports.DEFAULT_INSPECT_OPTS,
};
// add global support for pretty millisecond formatting with %n
debug_1.default.formatters.n = (v) => {
    if (v == null || Number.isNaN(v)) {
        return String(v);
    }
    return debug_1.default.humanize(v);
};
// override default formatters for node
if (typeof window === 'undefined') {
    // override %o & %O to ensure default opts apply
    debug_1.default.formatters.o = function o(v) {
        // @ts-expect-error inspectOpts not in debug types
        this.inspectOpts.colors = this.useColors;
        return util_1.default.inspect(v, { ...this.inspectOpts, ...exports.DEFAULT_INSPECT_OPTS })
            .split('\n')
            .map((str) => str.trim())
            .join(' ');
    };
    debug_1.default.formatters.O = function O(v) {
        // @ts-expect-error inspectOpts not in debug types
        this.inspectOpts.colors = this.useColors;
        return util_1.default.inspect(v, { ...this.inspectOpts, ...exports.DEFAULT_INSPECT_OPTS });
    };
}
const StreamrDebug = Object.assign(debug.extend.bind(debug), {
    enable: debug_1.default.enable.bind(debug_1.default),
    disable: debug_1.default.disable.bind(debug_1.default),
    humanize: debug_1.default.humanize.bind(debug_1.default),
});
exports.Debug = StreamrDebug;
function inspect(value, inspectOptions = {}) {
    return util_1.default.inspect(value, {
        ...exports.DEFAULT_INSPECT_OPTS,
        ...inspectOptions,
    });
}
exports.inspect = inspect;
function formatWithOptions(inspectOptions, msgFormat, ...param) {
    return util_1.default.formatWithOptions({
        ...exports.DEFAULT_INSPECT_OPTS,
        ...inspectOptions,
    }, msgFormat, ...param);
}
exports.formatWithOptions = formatWithOptions;
function format(msgFormat, ...param) {
    return formatWithOptions(exports.DEFAULT_INSPECT_OPTS, msgFormat, ...param);
}
exports.format = format;
//# sourceMappingURL=log.js.map