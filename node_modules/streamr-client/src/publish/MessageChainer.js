"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const streamr_client_protocol_1 = require("streamr-client-protocol");
function MessageChainer({ streamId, streamPartition, publisherId, msgChainId = utils_1.randomString(20) }) {
    let prevMsgRef;
    /**
     * Generate the next message MessageID + previous MessageRef for this message chain.
     * Messages with same timestamp get incremented sequence numbers.
     */
    return function add(timestamp) {
        // NOTE: publishing back-dated (i.e. non-sequentially timestamped) messages will 'break' sequencing.
        // i.e. we lose track of biggest sequence number whenever timestamp changes for stream id+partition combo
        // so backdated messages will start at sequence 0 again, regardless of the sequencing of existing messages.
        // storage considers timestamp+sequence number unique, so the newer messages will clobber the older messages
        // Not feasible to keep greatest sequence number for every millisecond timestamp so not sure a good way around this.
        // Possible we should keep a global sequence number
        const isSameTimestamp = prevMsgRef && prevMsgRef.timestamp === timestamp;
        const isBackdated = prevMsgRef && prevMsgRef.timestamp > timestamp;
        // increment if timestamp the same, otherwise 0
        const nextSequenceNumber = isSameTimestamp ? prevMsgRef.sequenceNumber + 1 : 0;
        const messageId = new streamr_client_protocol_1.MessageID(streamId, streamPartition, timestamp, nextSequenceNumber, publisherId, msgChainId);
        // update latest timestamp + sequence for this streamId+partition
        // (see note above about clobbering sequencing)
        // don't update latest if timestamp < previous timestamp
        // this "fixes" the sequence breaking issue above, but this message will silently disappear
        const currentPrevMsgRef = prevMsgRef;
        if (!isBackdated) {
            prevMsgRef = new streamr_client_protocol_1.MessageRef(timestamp, nextSequenceNumber);
        }
        return [messageId, currentPrevMsgRef];
    };
}
exports.default = MessageChainer;
//# sourceMappingURL=MessageChainer.js.map