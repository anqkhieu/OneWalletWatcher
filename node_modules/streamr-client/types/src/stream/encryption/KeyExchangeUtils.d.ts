import { StreamMessage, Errors } from 'streamr-client-protocol';
import { GroupKey, GroupKeyish } from './Encryption';
import { StreamrClient } from '../../StreamrClient';
export declare const ValidationError: typeof Errors.ValidationError;
export declare function isKeyExchangeStream(id?: string): boolean;
declare type Address = string;
export declare type GroupKeyId = string;
export declare function getKeyExchangeStreamId(address: Address): string;
export declare type GroupKeysSerialized = Record<GroupKeyId, GroupKeyish>;
export declare function parseGroupKeys(groupKeys?: GroupKeysSerialized): Map<GroupKeyId, GroupKey>;
export declare function subscribeToKeyExchangeStream(client: StreamrClient, onKeyExchangeMessage: (msg: any, streamMessage: StreamMessage) => void): Promise<void | import("../..").Subscription>;
export declare type KeyExchangeOptions = {
    groupKeys?: Record<string, GroupKeysSerialized>;
};
export {};
