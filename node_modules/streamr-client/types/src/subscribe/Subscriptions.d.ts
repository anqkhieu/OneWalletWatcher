import Subscription from './Subscription';
import SubscriptionSession from './SubscriptionSession';
import { MaybeAsync } from '../types';
import StreamrClient, { StreamPartDefinition } from '..';
/**
 * Keeps track of subscriptions.
 */
export default class Subscriptions {
    client: StreamrClient;
    readonly subSessions: Map<string, SubscriptionSession>;
    constructor(client: StreamrClient);
    add(opts: StreamPartDefinition, onFinally?: MaybeAsync<(err?: any) => void>): Promise<Subscription>;
    remove(sub: Subscription): Promise<void>;
    /**
     * Remove all subscriptions, optionally only those matching options.
     */
    removeAll(options?: StreamPartDefinition): Promise<unknown[]>;
    /**
     * Count all subscriptions.
     */
    countAll(): number;
    /**
     * Count all matching subscriptions.
     */
    count(options?: StreamPartDefinition): number;
    /**
     * Get all subscriptions.
     */
    getAll(): Subscription[];
    /**
     * Get subscription session for matching sub options.
     */
    getSubscriptionSession(options: StreamPartDefinition): SubscriptionSession | undefined;
    /**
     * Get all subscriptions matching options.
     */
    get(options?: StreamPartDefinition): Subscription[];
}
