/**
 * Utilities shared between publish & subscribe
 */
import { ControlLayer } from 'streamr-client-protocol';
import { EthereumAddress, Todo } from '../types';
import { StreamrClient } from '../StreamrClient';
import { StreamPartDefinition, ValidatedStreamPartDefinition } from '.';
export declare function StreamKey({ streamId, streamPartition }: Todo): string;
export declare function validateOptions<U>(optionsOrStreamId: StreamPartDefinition): ValidatedStreamPartDefinition & U;
export declare const STREAM_MESSAGE_TYPES: ControlLayer.ControlMessageType[];
export declare function waitForMatchingMessage({ connection, matchFn, timeout, types, rejectOnTimeout, timeoutMessage, cancelTask, }: Todo): Promise<unknown>;
/**
 * Wait for matching response types to requestId, or ErrorResponse.
 */
export declare function waitForResponse({ requestId, timeoutMessage, ...opts }: Todo): Promise<unknown>;
export declare function waitForRequestResponse(client: StreamrClient, request: Todo, opts?: Todo): Promise<unknown>;
export declare const createStreamId: (streamIdOrPath: string, ownerProvider?: (() => Promise<EthereumAddress | undefined>) | undefined) => Promise<string>;
