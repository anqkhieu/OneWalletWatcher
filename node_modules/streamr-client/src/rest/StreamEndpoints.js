"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEndpoints = void 0;
const http_1 = require("http");
const https_1 = require("https");
const qs_1 = __importDefault(require("qs"));
const utils_1 = require("../utils");
const log_1 = require("../utils/log");
const utils_2 = require("../stream/utils");
const stream_1 = require("../stream");
const StreamPart_1 = require("../stream/StreamPart");
const KeyExchangeUtils_1 = require("../stream/encryption/KeyExchangeUtils");
const authFetch_1 = __importStar(require("./authFetch"));
const StorageNode_1 = require("../stream/StorageNode");
const debug = log_1.Debug('StreamEndpoints');
const agentSettings = {
    keepAlive: true,
    keepAliveMsecs: 5000,
};
const agentByProtocol = {
    http: new http_1.Agent(agentSettings),
    https: new https_1.Agent(agentSettings),
};
function getKeepAliveAgentForUrl(url) {
    if (url.startsWith('https')) {
        return agentByProtocol.https;
    }
    if (url.startsWith('http')) {
        return agentByProtocol.http;
    }
    throw new Error(`Unknown protocol in URL: ${url}`);
}
/** TODO the class should be annotated with at-internal, but adding the annotation hides the methods */
class StreamEndpoints {
    constructor(client) {
        this.client = client;
    }
    /**
     * @category Important
     */
    async getStream(streamId) {
        this.client.debug('getStream %o', {
            streamId,
        });
        if (KeyExchangeUtils_1.isKeyExchangeStream(streamId)) {
            return new stream_1.Stream(this.client, {
                id: streamId,
                partitions: 1,
            });
        }
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId);
        const json = await authFetch_1.default(url, this.client.session);
        return new stream_1.Stream(this.client, json);
    }
    /**
     * @category Important
     */
    async listStreams(query = {}) {
        this.client.debug('listStreams %o', {
            query,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams') + '?' + qs_1.default.stringify(query);
        const json = await authFetch_1.default(url, this.client.session);
        return json ? json.map((stream) => new stream_1.Stream(this.client, stream)) : [];
    }
    async getStreamByName(name) {
        this.client.debug('getStreamByName %o', {
            name,
        });
        const json = await this.listStreams({
            name,
            // @ts-expect-error
            public: false,
        });
        return json[0] ? new stream_1.Stream(this.client, json[0]) : Promise.reject(new authFetch_1.NotFoundError('Stream: name=' + name));
    }
    /**
     * @category Important
     * @param props - if id is specified, it can be full streamId or path
     */
    async createStream(props) {
        this.client.debug('createStream %o', {
            props,
        });
        const body = ((props === null || props === void 0 ? void 0 : props.id) !== undefined) ? {
            ...props,
            id: await utils_2.createStreamId(props.id, () => this.client.getAddress())
        } : props;
        const json = await authFetch_1.default(utils_1.getEndpointUrl(this.client.options.restUrl, 'streams'), this.client.session, {
            method: 'POST',
            body: JSON.stringify(body),
        });
        return new stream_1.Stream(this.client, json);
    }
    /**
     * @category Important
     */
    async getOrCreateStream(props) {
        this.client.debug('getOrCreateStream %o', {
            props,
        });
        // Try looking up the stream by id or name, whichever is defined
        try {
            if (props.id) {
                return await this.getStream(props.id);
            }
            return await this.getStreamByName(props.name);
        }
        catch (err) {
            // try create stream if NOT_FOUND + also supplying an id.
            if (props.id && err.errorCode === authFetch_1.ErrorCode.NOT_FOUND) {
                const stream = await this.createStream(props);
                debug('Created stream: %s', props.id, stream.toObject());
                return stream;
            }
            throw err;
        }
    }
    async getStreamPublishers(streamId) {
        this.client.debug('getStreamPublishers %o', {
            streamId,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'publishers');
        const json = await authFetch_1.default(url, this.client.session);
        return json.addresses.map((a) => a.toLowerCase());
    }
    async isStreamPublisher(streamId, ethAddress) {
        this.client.debug('isStreamPublisher %o', {
            streamId,
            ethAddress,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'publisher', ethAddress);
        try {
            await authFetch_1.default(url, this.client.session);
            return true;
        }
        catch (e) {
            this.client.debug(e);
            if (e.response && e.response.status === 404) {
                return false;
            }
            throw e;
        }
    }
    async getStreamSubscribers(streamId) {
        this.client.debug('getStreamSubscribers %o', {
            streamId,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'subscribers');
        const json = await authFetch_1.default(url, this.client.session);
        return json.addresses.map((a) => a.toLowerCase());
    }
    async isStreamSubscriber(streamId, ethAddress) {
        this.client.debug('isStreamSubscriber %o', {
            streamId,
            ethAddress,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'subscriber', ethAddress);
        try {
            await authFetch_1.default(url, this.client.session);
            return true;
        }
        catch (e) {
            if (e.response && e.response.status === 404) {
                return false;
            }
            throw e;
        }
    }
    async getStreamValidationInfo(streamId) {
        this.client.debug('getStreamValidationInfo %o', {
            streamId,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'validation');
        const json = await authFetch_1.default(url, this.client.session);
        return json;
    }
    async getStreamLast(streamObjectOrId) {
        const { streamId, streamPartition = 0, count = 1 } = utils_2.validateOptions(streamObjectOrId);
        this.client.debug('getStreamLast %o', {
            streamId,
            streamPartition,
            count,
        });
        const url = (
        // @ts-expect-error
        utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'data', 'partitions', streamPartition, 'last')
            + `?${qs_1.default.stringify({ count })}`);
        const json = await authFetch_1.default(url, this.client.session);
        return json;
    }
    async getStreamPartsByStorageNode(node) {
        const address = (node instanceof StorageNode_1.StorageNode) ? node.getAddress() : node;
        const json = await authFetch_1.default(utils_1.getEndpointUrl(this.client.options.restUrl, 'storageNodes', address, 'streams'), this.client.session);
        let result = [];
        json.forEach((stream) => {
            result = result.concat(StreamPart_1.StreamPart.fromStream(stream));
        });
        return result;
    }
    async publishHttp(streamObjectOrId, data, requestOptions = {}, keepAlive = true) {
        let streamId;
        if (streamObjectOrId instanceof stream_1.Stream) {
            streamId = streamObjectOrId.id;
        }
        else {
            streamId = streamObjectOrId;
        }
        this.client.debug('publishHttp %o', {
            streamId, data,
        });
        // Send data to the stream
        await authFetch_1.default(utils_1.getEndpointUrl(this.client.options.restUrl, 'streams', streamId, 'data'), this.client.session, {
            ...requestOptions,
            method: 'POST',
            body: JSON.stringify(data),
            agent: keepAlive ? getKeepAliveAgentForUrl(this.client.options.restUrl) : undefined,
        });
    }
}
exports.StreamEndpoints = StreamEndpoints;
//# sourceMappingURL=StreamEndpoints.js.map