"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validations_1 = require("../../utils/validations");
class EncryptedGroupKey {
    /**
     * A pair (groupKeyId, encryptedGroupKey) where the encryptedGroupKey is an encrypted, hex-encoded version of the group key.
     * @param groupKeyId
     * @param encryptedGroupKeyHex
     * @param serialized Optional. If given, this exact string is returned from serialize().
     */
    constructor(groupKeyId, encryptedGroupKeyHex, serialized = null) {
        (0, validations_1.validateIsString)('groupKeyId', groupKeyId);
        this.groupKeyId = groupKeyId;
        (0, validations_1.validateIsString)('encryptedGroupKeyHex', encryptedGroupKeyHex);
        this.encryptedGroupKeyHex = encryptedGroupKeyHex;
        (0, validations_1.validateIsString)('serialized', serialized, true);
        this.serialized = serialized;
    }
    toArray() {
        return [this.groupKeyId, this.encryptedGroupKeyHex];
    }
    serialize() {
        // Return the cached serialized form to ensure that it stays unchanged (important for validation)
        if (this.serialized) {
            return this.serialized;
        }
        return JSON.stringify(this.toArray());
    }
    static deserialize(json) {
        const [groupKeyId, encryptedGroupKeyHex] = JSON.parse(json);
        return new EncryptedGroupKey(groupKeyId, encryptedGroupKeyHex, json);
    }
    static fromArray(arr) {
        const [groupKeyId, encryptedGroupKeyHex] = arr;
        return new EncryptedGroupKey(groupKeyId, encryptedGroupKeyHex);
    }
}
exports.default = EncryptedGroupKey;
//# sourceMappingURL=EncryptedGroupKey.js.map