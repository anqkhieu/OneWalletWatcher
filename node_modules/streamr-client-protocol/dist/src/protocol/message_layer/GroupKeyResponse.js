"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validations_1 = require("../../utils/validations");
const ValidationError_1 = __importDefault(require("../../errors/ValidationError"));
const StreamMessage_1 = __importDefault(require("./StreamMessage"));
const GroupKeyMessage_1 = __importDefault(require("./GroupKeyMessage"));
const EncryptedGroupKey_1 = __importDefault(require("./EncryptedGroupKey"));
class GroupKeyResponse extends GroupKeyMessage_1.default {
    constructor({ requestId, streamId, encryptedGroupKeys }) {
        super(streamId, StreamMessage_1.default.MESSAGE_TYPES.GROUP_KEY_RESPONSE);
        (0, validations_1.validateIsString)('requestId', requestId);
        this.requestId = requestId;
        (0, validations_1.validateIsArray)('encryptedGroupKeys', encryptedGroupKeys);
        this.encryptedGroupKeys = encryptedGroupKeys;
        // Validate content of encryptedGroupKeys
        this.encryptedGroupKeys.forEach((it) => {
            if (!(it instanceof EncryptedGroupKey_1.default)) {
                throw new ValidationError_1.default(`Expected 'encryptedGroupKeys' to be a list of EncryptedGroupKey instances! Was: ${this.encryptedGroupKeys}`);
            }
        });
    }
    toArray() {
        return [this.requestId, this.streamId, this.encryptedGroupKeys.map((it) => it.toArray())];
    }
    static fromArray(arr) {
        const [requestId, streamId, encryptedGroupKeys] = arr;
        return new GroupKeyResponse({
            requestId,
            streamId,
            encryptedGroupKeys: encryptedGroupKeys.map((it) => EncryptedGroupKey_1.default.fromArray(it)),
        });
    }
    static is(streamMessage) {
        return streamMessage.messageType === StreamMessage_1.default.MESSAGE_TYPES.GROUP_KEY_RESPONSE;
    }
}
exports.default = GroupKeyResponse;
GroupKeyMessage_1.default.classByMessageType[StreamMessage_1.default.MESSAGE_TYPES.GROUP_KEY_RESPONSE] = GroupKeyResponse;
//# sourceMappingURL=GroupKeyResponse.js.map