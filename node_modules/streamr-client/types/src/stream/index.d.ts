export { GroupKey } from './encryption/Encryption';
import { StorageNode } from './StorageNode';
import { StreamrClient } from '../StreamrClient';
import { EthereumAddress } from '../types';
export declare type StreamPartDefinitionOptions = {
    streamId?: string;
    streamPartition?: number;
    id?: string;
    partition?: number;
    stream?: StreamrStream | string;
};
export declare type StreamPartDefinition = string | StreamPartDefinitionOptions;
export declare type ValidatedStreamPartDefinition = {
    streamId: string;
    streamPartition: number;
    key: string;
};
interface StreamPermisionBase {
    id: number;
    operation: StreamOperation;
}
export interface UserStreamPermission extends StreamPermisionBase {
    user: string;
}
export interface AnonymousStreamPermisson extends StreamPermisionBase {
    anonymous: true;
}
export declare type StreamPermision = UserStreamPermission | AnonymousStreamPermisson;
export declare enum StreamOperation {
    STREAM_GET = "stream_get",
    STREAM_EDIT = "stream_edit",
    STREAM_DELETE = "stream_delete",
    STREAM_PUBLISH = "stream_publish",
    STREAM_SUBSCRIBE = "stream_subscribe",
    STREAM_SHARE = "stream_share"
}
export interface StreamProperties {
    id?: string;
    name?: string;
    description?: string;
    config?: {
        fields: Field[];
    };
    partitions?: number;
    requireSignedData?: boolean;
    requireEncryptedData?: boolean;
    storageDays?: number;
    inactivityThresholdHours?: number;
}
declare const VALID_FIELD_TYPES: readonly ["number", "string", "boolean", "list", "map"];
export declare type Field = {
    name: string;
    type: typeof VALID_FIELD_TYPES[number];
};
declare class StreamrStream {
    id: string;
    name: string;
    description?: string;
    config: {
        fields: Field[];
    };
    partitions?: number;
    requireEncryptedData?: boolean;
    requireSignedData?: boolean;
    storageDays?: number;
    inactivityThresholdHours?: number;
    constructor(client: StreamrClient, props: StreamProperties);
    update(): Promise<StreamrStream | undefined>;
    delete(): Promise<void>;
    getPermissions(): Promise<StreamPermision[]>;
    getMyPermissions(): Promise<StreamPermision[]>;
    hasPermission(operation: StreamOperation, userId: string | undefined): Promise<StreamPermision | undefined>;
    grantPermission(operation: StreamOperation, userId: string | undefined): Promise<StreamPermision>;
    revokePermission(permissionId: number): Promise<void>;
    detectFields(): Promise<void>;
    addToStorageNode(node: StorageNode | EthereumAddress, { timeout, pollInterval }?: {
        timeout?: number;
        pollInterval?: number;
    }): Promise<void>;
    private isStreamStoredInStorageNode;
    removeFromStorageNode(node: StorageNode | EthereumAddress): Promise<void>;
    getStorageNodes(): Promise<StorageNode[]>;
    publish(content: object, timestamp?: number | string | Date, partitionKey?: string): Promise<import("streamr-client-protocol").PublishRequest>;
}
export { StreamrStream as Stream };
