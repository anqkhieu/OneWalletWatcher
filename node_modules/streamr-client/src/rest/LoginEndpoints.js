"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginEndpoints = void 0;
const utils_1 = require("../utils");
const authFetch_1 = __importStar(require("./authFetch"));
async function getSessionToken(url, props) {
    return authFetch_1.default(url, undefined, {
        method: 'POST',
        body: JSON.stringify(props),
        headers: {
            'Content-Type': 'application/json',
        },
    });
}
/** TODO the class should be annotated with at-internal, but adding the annotation hides the methods */
class LoginEndpoints {
    constructor(client) {
        this.client = client;
    }
    /** @internal */
    async getChallenge(address) {
        this.client.debug('getChallenge %o', {
            address,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'login', 'challenge', address);
        return authFetch_1.default(url, undefined, {
            method: 'POST',
        });
    }
    /** @internal */
    async sendChallengeResponse(challenge, signature, address) {
        this.client.debug('sendChallengeResponse %o', {
            challenge,
            signature,
            address,
        });
        const url = utils_1.getEndpointUrl(this.client.options.restUrl, 'login', 'response');
        const props = {
            challenge,
            signature,
            address,
        };
        return getSessionToken(url, props);
    }
    /** @internal */
    async loginWithChallengeResponse(signingFunction, address) {
        this.client.debug('loginWithChallengeResponse %o', {
            address,
        });
        const challenge = await this.getChallenge(address);
        const signature = await signingFunction(challenge.challenge);
        return this.sendChallengeResponse(challenge, signature, address);
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, class-methods-use-this
    async loginWithApiKey(_apiKey) {
        const message = 'apiKey auth is no longer supported. Please create an ethereum identity.';
        throw new authFetch_1.AuthFetchError(message);
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, class-methods-use-this
    async loginWithUsernamePassword(_username, _password) {
        const message = 'username/password auth is no longer supported. Please create an ethereum identity.';
        throw new authFetch_1.AuthFetchError(message);
    }
    async getUserInfo() {
        this.client.debug('getUserInfo');
        return authFetch_1.default(`${this.client.options.restUrl}/users/me`, this.client.session);
    }
    /** @internal */
    async logoutEndpoint() {
        this.client.debug('logoutEndpoint');
        await authFetch_1.default(`${this.client.options.restUrl}/logout`, this.client.session, {
            method: 'POST',
        });
    }
}
exports.LoginEndpoints = LoginEndpoints;
//# sourceMappingURL=LoginEndpoints.js.map