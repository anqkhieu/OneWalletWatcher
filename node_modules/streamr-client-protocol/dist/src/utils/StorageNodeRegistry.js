"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStorageNodeRegistryFromContract = exports.createStorageNodeRegistry = exports.StorageNodeRegistry = void 0;
const contracts_1 = require("@ethersproject/contracts");
const providers_1 = require("@ethersproject/providers");
const storageNodeRegistryConfig = __importStar(require("../../contracts/NodeRegistry.json"));
class StorageNodeRegistry {
    constructor(records) {
        this.records = records;
    }
    getStorageNodeHTTP(address) {
        const found = this.records.find((p) => p.address === address);
        if (found) {
            return found.url;
        }
        else {
            throw new Error(`Storage node with address (${address}) not found in registry`);
        }
    }
    getAllStorageNodes() {
        return this.records;
    }
}
exports.StorageNodeRegistry = StorageNodeRegistry;
async function fetchStorageNodes(contractAddress, jsonRpcProvider) {
    const provider = new providers_1.JsonRpcProvider(jsonRpcProvider);
    // check that provider is connected and has some valid blockNumber
    await provider.getBlockNumber();
    const contract = new contracts_1.Contract(contractAddress, storageNodeRegistryConfig.abi, provider);
    // check that contract is connected
    await contract.addressPromise;
    if (typeof contract.getNodes !== 'function') {
        throw Error(`getNodes function is not defined in smart contract (${contractAddress})`);
    }
    const result = await contract.getNodes();
    return result.map((node) => {
        return {
            address: node.nodeAddress,
            url: JSON.parse(node.metadata).http
        };
    });
}
function createStorageNodeRegistry(servers) {
    return new StorageNodeRegistry(servers);
}
exports.createStorageNodeRegistry = createStorageNodeRegistry;
async function getStorageNodeRegistryFromContract({ contractAddress, jsonRpcProvider }) {
    const storageNodes = await fetchStorageNodes(contractAddress, jsonRpcProvider);
    return createStorageNodeRegistry(storageNodes);
}
exports.getStorageNodeRegistryFromContract = getStorageNodeRegistryFromContract;
//# sourceMappingURL=StorageNodeRegistry.js.map