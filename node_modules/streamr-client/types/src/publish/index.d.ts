import { ControlLayer, PublishRequest } from 'streamr-client-protocol';
import { LimitAsyncFnByKey } from '../utils';
import { GroupKey } from '../stream';
import { StreamrClient } from '../StreamrClient';
import StreamMessageCreator from './MessageCreator';
import { StreamIDish } from './utils';
export declare class FailedToPublishError extends Error {
    streamId: string;
    msg: string;
    reason: Error | undefined;
    constructor(streamId: string, msg: string, reason?: Error);
}
/**
 * Add handle to keep connection open while publishing.
 * Refreshes handle timeout on each call.
 * Only remove publish handle after inactivity of options.publishAutoDisconnectDelay ms.
 */
export default class Publisher {
    readonly debug: import("debug").Debugger;
    readonly sendQueue: ReturnType<typeof LimitAsyncFnByKey>;
    readonly streamMessageCreator: StreamMessageCreator;
    readonly client: StreamrClient;
    private readonly onErrorEmit;
    private readonly publishHandle;
    private publishHandleTimeout?;
    constructor(client: StreamrClient);
    listenForErrors(request: PublishRequest): Promise<void>;
    private sendMessage;
    publishMessage(streamObjectOrId: StreamIDish, { content, timestamp, partitionKey }: {
        content: any;
        timestamp?: string | number | Date;
        partitionKey?: string | number;
    }): Promise<PublishRequest>;
    /**
     * Create publish handle to keep connection open while publishing.
     */
    private setupPublishHandle;
    private clearRemovePublishHandleTimeout;
    /**
     * Reset publish handle timeout, or start new
     */
    private refreshAutoDisconnectTimeout;
    publish(streamObjectOrId: StreamIDish, content: any, timestamp?: string | number | Date, partitionKey?: string | number): Promise<ControlLayer.PublishRequest>;
    startKeyExchange(): Promise<void>;
    stop(): Promise<void>;
    rotateGroupKey(streamId: string): Promise<void>;
    setNextGroupKey(streamId: string, newKey: GroupKey): Promise<void>;
    rekey(streamId: string): Promise<void>;
}
