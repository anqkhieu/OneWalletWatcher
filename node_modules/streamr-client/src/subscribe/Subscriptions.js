"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const utils_2 = require("../stream/utils");
const Subscription_1 = __importDefault(require("./Subscription"));
const SubscriptionSession_1 = __importDefault(require("./SubscriptionSession"));
async function defaultOnFinally(err) {
    if (err) {
        throw err;
    }
}
/**
 * Keeps track of subscriptions.
 */
class Subscriptions {
    constructor(client) {
        this.subSessions = new Map();
        this.client = client;
    }
    async add(opts, onFinally = defaultOnFinally) {
        const options = utils_2.validateOptions(opts);
        const { key } = options;
        // get/create subscription session
        // don't add SubscriptionSession to subSessions until after subscription successfully created
        const subSession = this.subSessions.get(key) || new SubscriptionSession_1.default(this.client, options);
        // create subscription
        const sub = new Subscription_1.default(this.client, {
            ...options,
            validate: subSession.validate,
        }, async (err) => {
            try {
                await this.remove(sub);
            }
            finally {
                try {
                    await onFinally(err);
                }
                finally {
                    sub.emit('unsubscribed');
                    sub.removeAllListeners();
                }
            }
        });
        sub.count = () => {
            // sub.count() gives number of subs on same stream+partition
            return this.count(options);
        };
        // sub didn't throw, add subsession
        this.subSessions.set(key, subSession);
        // add subscription to subSession
        try {
            await subSession.add(sub);
        }
        catch (err) {
            // clean up if fail
            await this.remove(sub);
            throw err;
        }
        return sub;
    }
    async remove(sub) {
        const { key } = sub;
        let cancelTask;
        try {
            cancelTask = sub.cancel();
            const subSession = this.subSessions.get(key);
            if (subSession) {
                await subSession.remove(sub);
                // remove subSession if no more subscriptions
                if (!subSession.count()) {
                    this.subSessions.delete(key);
                }
            }
        }
        finally {
            await cancelTask; // only wait for cancel at end
        }
    }
    /**
     * Remove all subscriptions, optionally only those matching options.
     */
    async removeAll(options) {
        const subs = this.get(options);
        return utils_1.allSettledValues(subs.map((sub) => (this.remove(sub))));
    }
    /**
     * Count all subscriptions.
     */
    countAll() {
        let count = 0;
        this.subSessions.forEach((s) => {
            count += s.count();
        });
        return count;
    }
    /**
     * Count all matching subscriptions.
     */
    count(options) {
        if (options === undefined) {
            return this.countAll();
        }
        return this.get(options).length;
    }
    /**
     * Get all subscriptions.
     */
    getAll() {
        return [...this.subSessions.values()].reduce((o, s) => {
            o.push(...s.subscriptions);
            return o;
        }, []);
    }
    /**
     * Get subscription session for matching sub options.
     */
    getSubscriptionSession(options) {
        const { key } = utils_2.validateOptions(options);
        return this.subSessions.get(key);
    }
    /**
     * Get all subscriptions matching options.
     */
    get(options) {
        if (options === undefined) {
            return this.getAll();
        }
        const { key } = utils_2.validateOptions(options);
        const subSession = this.subSessions.get(key);
        if (!subSession) {
            return [];
        }
        return [...subSession.subscriptions];
    }
}
exports.default = Subscriptions;
//# sourceMappingURL=Subscriptions.js.map