"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validations_1 = require("../../utils/validations");
const ValidationError_1 = __importDefault(require("../../errors/ValidationError"));
const StreamMessage_1 = __importDefault(require("./StreamMessage"));
class GroupKeyMessage {
    constructor(streamId, messageType) {
        (0, validations_1.validateIsString)('streamId', streamId);
        this.streamId = streamId;
        StreamMessage_1.default.validateMessageType(messageType);
        this.messageType = messageType;
    }
    serialize() {
        return JSON.stringify(this.toArray());
    }
    static deserialize(serialized, messageType) {
        if (!GroupKeyMessage.classByMessageType[messageType]) {
            throw new ValidationError_1.default(`Unknown MessageType: ${messageType}`);
        }
        return GroupKeyMessage.classByMessageType[messageType].fromArray(JSON.parse(serialized));
    }
    static fromStreamMessage(streamMessage) {
        return GroupKeyMessage.deserialize(streamMessage.getSerializedContent(), streamMessage.messageType);
    }
    toStreamMessage(messageId, prevMsgRef) {
        return new StreamMessage_1.default({
            messageId,
            prevMsgRef,
            content: this.serialize(),
            messageType: this.messageType,
        });
    }
    static fromArray(_arr) {
        // typescript doesn't support abstract static so have to do this
        throw new Error('must be overridden');
    }
}
exports.default = GroupKeyMessage;
// messageType -> class mapping
GroupKeyMessage.classByMessageType = {};
//# sourceMappingURL=GroupKeyMessage.js.map