import { Serializer } from '../../Serializer';
export declare const PLACEHOLDER_REQUEST_ID_PROTOCOL_V1 = "PLACEHOLDER_REQUEST_ID_PROTOCOL_V1";
export declare enum ControlMessageType {
    BroadcastMessage = 0,
    UnicastMessage = 1,
    SubscribeResponse = 2,
    UnsubscribeResponse = 3,
    ResendResponseResending = 4,
    ResendResponseResent = 5,
    ResendResponseNoResend = 6,
    ErrorResponse = 7,
    PublishRequest = 8,
    SubscribeRequest = 9,
    UnsubscribeRequest = 10,
    ResendLastRequest = 11,
    ResendFromRequest = 12,
    ResendRangeRequest = 13
}
export interface ControlMessageOptions {
    version?: number;
    requestId: string;
}
export default class ControlMessage {
    static LATEST_VERSION: number;
    static TYPES: typeof ControlMessageType;
    version: number;
    type: ControlMessageType;
    requestId: string;
    constructor(version: number | undefined, type: ControlMessageType, requestId: string);
    static registerSerializer(version: number, type: ControlMessageType, serializer: Serializer<ControlMessage>): void;
    static unregisterSerializer(version: number, type: ControlMessageType): void;
    static getSerializer(version: number, type: ControlMessageType): Serializer<ControlMessage>;
    static getSupportedVersions(): number[];
    serialize(version?: number, ...typeSpecificSerializeArgs: any[]): string;
    /**
     * Takes a serialized representation (array or string) of a message, and returns a ControlMessage instance.
     */
    static deserialize(msg: any, ...typeSpecificDeserializeArgs: any[]): ControlMessage;
}
