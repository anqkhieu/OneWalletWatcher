"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyToArrayIndex = void 0;
const crypto_1 = __importDefault(require("crypto"));
/**
 * Computes a deterministic index for a given string or number key.
 * Used for deterministically selecting an entry from an ordered list
 * for various load balancing and partitioning purposes.
 *
 * @param lengthOfArray Number of items to select from
 * @param key Input string or number
 * @returns Array index between [0..lengthOfArray-1]
 */
const keyToArrayIndex = (lengthOfArray, key) => {
    if (!(Number.isSafeInteger(lengthOfArray) && lengthOfArray > 0)) {
        throw new Error(`lengthOfArray is not a safe positive integer! ${lengthOfArray}`);
    }
    if (lengthOfArray === 1) {
        // Fast common case
        return 0;
    }
    // Number key handling
    if (typeof key === 'number') {
        return Math.abs(key) % lengthOfArray;
    }
    // String key handling
    const buffer = crypto_1.default.createHash('md5').update(key).digest();
    const intHash = buffer.readInt32LE(0);
    return Math.abs(intHash) % lengthOfArray;
};
exports.keyToArrayIndex = keyToArrayIndex;
//# sourceMappingURL=HashUtil.js.map