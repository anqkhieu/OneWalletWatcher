"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriberKeyExchange = void 0;
const streamr_client_protocol_1 = require("streamr-client-protocol");
const p_memoize_1 = __importDefault(require("p-memoize"));
const utils_1 = require("../../utils");
const utils_2 = require("../utils");
const Encryption_1 = __importStar(require("./Encryption"));
const GroupKeyStore_1 = __importDefault(require("./GroupKeyStore"));
const KeyExchangeUtils_1 = require("./KeyExchangeUtils");
const { MESSAGE_TYPES } = streamr_client_protocol_1.StreamMessage;
function waitForSubMessage(sub, matchFn) {
    const task = utils_1.Defer();
    const onMessage = (content, streamMessage) => {
        try {
            if (matchFn(content, streamMessage)) {
                task.resolve(streamMessage);
            }
        }
        catch (err) {
            task.reject(err);
        }
    };
    sub.on('message', onMessage);
    sub.once('error', task.reject);
    task.finally(() => {
        sub.off('message', onMessage);
        sub.off('error', task.reject);
    }).catch(() => { }); // important: prevent unchained finally cleanup causing unhandled rejection
    return task;
}
async function getGroupKeysFromStreamMessage(streamMessage, encryptionUtil) {
    const { messageType } = streamMessage;
    const content = streamMessage.getParsedContent() || [];
    let encryptedGroupKeys = [];
    if (messageType === MESSAGE_TYPES.GROUP_KEY_RESPONSE) {
        encryptedGroupKeys = streamr_client_protocol_1.GroupKeyResponse.fromArray(content).encryptedGroupKeys || [];
    }
    else if (messageType === MESSAGE_TYPES.GROUP_KEY_ANNOUNCE) {
        const msg = streamr_client_protocol_1.GroupKeyAnnounce.fromArray(content);
        encryptedGroupKeys = msg.encryptedGroupKeys || [];
    }
    const tasks = encryptedGroupKeys.map(async (encryptedGroupKey) => (new Encryption_1.GroupKey(encryptedGroupKey.groupKeyId, await encryptionUtil.decryptWithPrivateKey(encryptedGroupKey.encryptedGroupKeyHex, true))));
    await Promise.allSettled(tasks);
    return Promise.all(tasks);
}
async function SubscriberKeyExchangeSubscription(client, getGroupKeyStore, encryptionUtil) {
    let sub;
    async function onKeyExchangeMessage(_parsedContent, streamMessage) {
        try {
            const { messageType } = streamMessage;
            if (messageType !== MESSAGE_TYPES.GROUP_KEY_ANNOUNCE) {
                return;
            }
            const groupKeys = await getGroupKeysFromStreamMessage(streamMessage, encryptionUtil);
            const groupKeyStore = await getGroupKeyStore(streamMessage.getStreamId());
            await Promise.all(groupKeys.map(async (groupKey) => (groupKeyStore.add(groupKey))));
        }
        catch (err) {
            if (!sub) {
                return;
            }
            sub.emit('error', err);
        }
    }
    sub = await KeyExchangeUtils_1.subscribeToKeyExchangeStream(client, onKeyExchangeMessage);
    if (!sub) {
        return undefined;
    }
    sub.on('error', () => { }); // errors should not shut down subscription
    return sub;
}
class SubscriberKeyExchange {
    constructor(client, { groupKeys = {} } = {}) {
        this.enabled = true;
        this.client = client;
        this.initialGroupKeys = groupKeys;
        this.getGroupKeyStore = p_memoize_1.default(this.getGroupKeyStore.bind(this), {
            cacheKey([maybeStreamId]) {
                const { streamId } = utils_2.validateOptions(maybeStreamId);
                return streamId;
            }
        });
        this.encryptionUtil = new Encryption_1.default(client.options.keyExchange);
    }
    async getSubscription() {
        return SubscriberKeyExchangeSubscription(this.client, this.getGroupKeyStore, this.encryptionUtil);
    }
    async requestKeys({ streamId, publisherId, groupKeyIds }) {
        const requestId = utils_1.uuid('GroupKeyRequest');
        const rsaPublicKey = this.encryptionUtil.getPublicKey();
        const keyExchangeStreamId = KeyExchangeUtils_1.getKeyExchangeStreamId(publisherId);
        let sub;
        let responseTask;
        try {
            sub = await this.getSubscription();
            if (!sub) {
                return [];
            }
            responseTask = waitForSubMessage(sub, (content, streamMessage) => {
                const { messageType } = streamMessage;
                const matchesMessageType = (messageType === streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.GROUP_KEY_RESPONSE
                    || messageType === streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.GROUP_KEY_ERROR_RESPONSE);
                if (!matchesMessageType) {
                    return false;
                }
                const groupKeyResponse = streamr_client_protocol_1.GroupKeyResponse.fromArray(content);
                return groupKeyResponse.requestId === requestId;
            });
            const msg = new streamr_client_protocol_1.GroupKeyRequest({
                streamId,
                requestId,
                rsaPublicKey,
                groupKeyIds,
            });
            await this.client.publish(keyExchangeStreamId, msg);
            const response = await responseTask;
            return response ? await getGroupKeysFromStreamMessage(response, this.encryptionUtil) : [];
        }
        finally {
            await responseTask;
            if (sub) {
                await sub.unsubscribe();
            }
        }
    }
    async getGroupKeyStore(streamId) {
        const clientId = await this.client.getAddress();
        return new GroupKeyStore_1.default({
            clientId,
            streamId,
            groupKeys: [...KeyExchangeUtils_1.parseGroupKeys(this.initialGroupKeys[streamId]).entries()]
        });
    }
    async getKey(streamMessage) {
        const streamId = streamMessage.getStreamId();
        const publisherId = streamMessage.getPublisherId();
        const { groupKeyId } = streamMessage;
        if (!groupKeyId) {
            return undefined;
        }
        const groupKeyStore = await this.getGroupKeyStore(streamId);
        if (!this.enabled) {
            return undefined;
        }
        const existingGroupKey = await groupKeyStore.get(groupKeyId);
        if (!this.enabled) {
            return undefined;
        }
        if (existingGroupKey) {
            return existingGroupKey;
        }
        const receivedGroupKeys = await this.requestKeys({
            streamId,
            publisherId,
            groupKeyIds: [groupKeyId],
        });
        if (!this.enabled) {
            return undefined;
        }
        await Promise.all(receivedGroupKeys.map(async (groupKey) => (groupKeyStore.add(groupKey))));
        if (!this.enabled) {
            return undefined;
        }
        return receivedGroupKeys.find((groupKey) => groupKey.id === groupKeyId);
    }
    cleanupPending() {
        p_memoize_1.default.clear(this.getGroupKeyStore);
    }
    async getGroupKey(streamMessage) {
        if (!streamMessage.groupKeyId) {
            return undefined;
        }
        await this.encryptionUtil.onReady();
        return this.getKey(streamMessage);
    }
    async start() {
        this.enabled = true;
    }
    async addNewKey(streamMessage) {
        if (!streamMessage.newGroupKey) {
            return;
        }
        const streamId = streamMessage.getStreamId();
        const groupKeyStore = await this.getGroupKeyStore(streamId);
        // newGroupKey has been converted into GroupKey
        const groupKey = streamMessage.newGroupKey;
        await groupKeyStore.add(groupKey);
    }
    async stop() {
        this.enabled = false;
    }
}
exports.SubscriberKeyExchange = SubscriberKeyExchange;
//# sourceMappingURL=KeyExchangeSubscriber.js.map