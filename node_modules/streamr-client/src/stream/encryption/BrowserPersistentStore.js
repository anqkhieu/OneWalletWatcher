"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const idb_keyval_1 = require("idb-keyval");
class BrowserPersistentStore {
    constructor({ clientId, streamId }) {
        this.streamId = encodeURIComponent(streamId);
        this.clientId = encodeURIComponent(clientId);
        this.dbName = `streamr-client::${clientId}::${streamId}`;
        this.store = idb_keyval_1.createStore(this.dbName, 'GroupKeys');
    }
    async has(key) {
        const val = await this.get(key);
        return val == null;
    }
    async get(key) {
        return idb_keyval_1.get(key, this.store);
    }
    async set(key, value) {
        const had = await this.has(key);
        await idb_keyval_1.set(key, value, this.store);
        return had;
    }
    async delete(key) {
        if (!await this.has(key)) {
            return false;
        }
        await idb_keyval_1.del(key, this.store);
        return true;
    }
    async clear() {
        const size = await this.size();
        await idb_keyval_1.clear(this.store);
        return !!size;
    }
    async size() {
        const allKeys = await idb_keyval_1.keys(this.store);
        return allKeys.length;
    }
    // eslint-disable-next-line class-methods-use-this
    async close() {
        // noop
    }
    async destroy() {
        await this.clear();
        await this.close();
    }
    async exists() {
        // always true for browser
        // can't currently implement without opening db, defeating purpose
        // waiting for indexedDB.databases() to gain browser support.
        return true;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
}
exports.default = BrowserPersistentStore;
//# sourceMappingURL=BrowserPersistentStore.js.map