import EventEmitter from 'eventemitter3';
import WebSocket from 'ws';
import { Debugger } from './utils/log';
import { Todo } from './types';
export interface ConnectionOptions {
    url?: string;
    autoConnect?: boolean;
    autoDisconnect?: boolean;
    disconnectDelay?: number;
    maxRetries?: number;
    retryBackoffFactor?: number;
    maxRetryWait?: number;
}
export declare class ConnectionError extends Error {
    reason?: Todo;
    constructor(err: Todo, ...args: Todo[]);
}
declare type AugmentedWebsocket = WebSocket & {
    id: string;
    debug: Debugger;
};
/**
 * Wraps WebSocket open/close with promise methods
 * adds events
 * handles simultaneous calls to open/close
 * waits for pending close/open before continuing
 */
export default class Connection extends EventEmitter {
    _debug: Todo;
    options: ConnectionOptions;
    retryCount: Todo;
    wantsState: Todo;
    connectionHandles: Todo;
    stepConnection: Todo;
    socket?: AugmentedWebsocket;
    didDisableAutoConnect?: Todo;
    isWaiting?: Todo;
    _isReconnecting: Todo;
    _backoffTimeout: Todo;
    sendID: Todo;
    static getOpen(): number;
    static closeOpen(): Promise<unknown[]>;
    constructor(options?: ConnectionOptions, debug?: Debugger);
    debug(formatter: any, ...args: any[]): any;
    emit(event: Todo, ...args: Todo[]): boolean;
    emitTransition(event: Todo, ...args: Todo[]): boolean;
    /**
     * Connection
     */
    connect(): Promise<void>;
    enableAutoDisconnect(autoDisconnect?: boolean | number): void;
    enableAutoConnect(autoConnect?: boolean | number): void;
    nextConnection(): Promise<void>;
    couldConnect(): boolean;
    isConnectionValid(): boolean;
    hasRetries(): boolean;
    maybeConnect(): Promise<void>;
    needsConnection(msg?: Todo): Promise<void>;
    /**
     * Disconnection
     */
    _setShouldDisconnect(): void;
    disconnect(): Promise<void>;
    nextDisconnection(): Promise<void>;
    backoffWait(): Promise<unknown>;
    /**
     * Auto Connect/Disconnect counters.
     */
    addHandle(id: Todo): Promise<void>;
    /**
     * When no more handles and autoDisconnect is true, disconnect.
     */
    removeHandle(id: Todo): Promise<void>;
    _couldAutoDisconnect(minSize?: number): boolean;
    send(msg: any): Promise<any>;
    _send(msg: any): Promise<any>;
    /**
     * Status flags
     */
    getState(): "connected" | "connecting" | "disconnected" | "disconnecting" | "unknown";
    isReconnecting(): any;
    isConnected(): boolean;
    isDisconnected(): boolean;
    isDisconnecting(): boolean;
    isConnecting(): boolean;
    onTransition({ onConnected, onConnecting, onDisconnecting, onDisconnected, onDone, onError, }: {
        onConnected?: (() => void) | undefined;
        onConnecting?: (() => void) | undefined;
        onDisconnecting?: (() => void) | undefined;
        onDisconnected?: (() => void) | undefined;
        onDone?: (() => void) | undefined;
        onError: any;
    }): () => Promise<void>;
}
export {};
