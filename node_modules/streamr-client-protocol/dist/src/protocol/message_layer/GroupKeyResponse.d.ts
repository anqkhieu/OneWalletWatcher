import StreamMessage from './StreamMessage';
import GroupKeyMessage from './GroupKeyMessage';
import EncryptedGroupKey, { EncryptedGroupKeySerialized } from './EncryptedGroupKey';
interface Options {
    requestId: string;
    streamId: string;
    encryptedGroupKeys: EncryptedGroupKey[];
}
declare type GroupKeyResponseSerialized = [string, string, EncryptedGroupKeySerialized[]];
export default class GroupKeyResponse extends GroupKeyMessage {
    requestId: string;
    encryptedGroupKeys: EncryptedGroupKey[];
    constructor({ requestId, streamId, encryptedGroupKeys }: Options);
    toArray(): GroupKeyResponseSerialized;
    static fromArray(arr: GroupKeyResponseSerialized): GroupKeyResponse;
    static is(streamMessage: StreamMessage): streamMessage is StreamMessage<GroupKeyResponseSerialized>;
}
export {};
