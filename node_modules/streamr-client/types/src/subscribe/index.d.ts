import Subscription from './Subscription';
import Subscriptions from './Subscriptions';
import { Todo, MaybeAsync } from '../types';
import StreamrClient, { StreamPartDefinition, SubscribeOptions } from '..';
export { Subscription };
declare type StreamOptions = Subscription | StreamPartDefinition | {
    options: Subscription | StreamPartDefinition;
};
/**
 * Top-level user-facing interface for creating/destroying subscriptions.
 */
export declare class Subscriber {
    readonly client: StreamrClient;
    readonly subscriptions: Subscriptions;
    constructor(client: StreamrClient);
    getSubscriptionSession(...args: Todo[]): import("./SubscriptionSession").default | undefined;
    get(opts: StreamPartDefinition): Subscription[];
    getAll(): Subscription[];
    count(options?: StreamPartDefinition): number;
    subscribe(opts: StreamPartDefinition, onFinally?: Todo): Promise<Subscription>;
    unsubscribeAll(): Promise<unknown[]>;
    stop(): Promise<void>;
    unsubscribe(options: StreamOptions): Promise<Todo>;
    resend(opts: Todo): Promise<Subscription>;
    resendSubscribe(opts: SubscribeOptions & StreamPartDefinition, onFinally?: MaybeAsync<(err?: any) => void>): Promise<any>;
}
