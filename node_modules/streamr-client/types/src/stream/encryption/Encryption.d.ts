import { MessageLayer } from 'streamr-client-protocol';
export declare class StreamMessageProcessingError extends Error {
    streamMessage: MessageLayer.StreamMessage;
    constructor(message: string | undefined, streamMessage: MessageLayer.StreamMessage);
}
export declare class UnableToDecryptError extends StreamMessageProcessingError {
    constructor(message: string | undefined, streamMessage: MessageLayer.StreamMessage);
}
declare class InvalidGroupKeyError extends Error {
    groupKey: GroupKey | any;
    constructor(message: string, groupKey?: any);
}
declare type GroupKeyObject = {
    id: string;
    hex: string;
    data: Uint8Array;
};
interface GroupKey extends GroupKeyObject {
}
export declare type GroupKeyish = GroupKey | GroupKeyObject | ConstructorParameters<typeof GroupKey>;
declare class GroupKey {
    static InvalidGroupKeyError: typeof InvalidGroupKeyError;
    static validate(maybeGroupKey: GroupKey): void;
    id: string;
    hex: string;
    data: Uint8Array;
    constructor(groupKeyId: string, groupKeyBufferOrHexString: Uint8Array | string);
    equals(other: GroupKey): boolean;
    toString(): string;
    toArray(): string[];
    serialize(): string;
    static generate(id?: string): GroupKey;
    static from(maybeGroupKey: GroupKeyish): GroupKey;
}
export { GroupKey };
